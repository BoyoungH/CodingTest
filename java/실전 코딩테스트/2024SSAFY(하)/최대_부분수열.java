import java.io.*;
import java.util.*;

public class 최대_부분수열 {
    public static void main(String[] args) throws IOException{
        
    }
}

// 입력으로 수열 A[1], A[2], …, A[N] 이 주어진다.
// 이 수열에서 두 개의 길이 K인 연속된 부분을 찾아서 두 부분에 속한 모든 값의 합이 최대가 되도록 하고, 그 합을 제시하라.
// 선택된 두 부분이 겹치면 안된다는 것에 주의하라.

// ﻿아래 첫 번째 입력으로 주어진 수열의 원소 중, A[2] = 4, A[3] = 3과 A[5] = 6, A[6] = 1 을 고르면,
// 그 총합은 14가 되며, 이 경우가 최적이다.

// [제약사항]
// 1.	N은 4 이상 3,000 이하이다. (4 ≤ N ≤ 3,000)
// 2.	K는 1 이상 [N/2]이하의 값이다. [N/2]는 N/2보다 크지 않은 최대 정수를 의미한다.
// 3.	배열의 원소는 -10,000 이상, 10,000 이하의 정수이다.

// [입력]
// 가장 첫 줄에는 테스트 케이스의 총 수가 주어진다.
// 그 다음 줄부터 각 테스트 케이스가 주어지며, 각 테스트 케이스는 2줄로 구성된다.
// 각 테스트 케이스의 첫 줄에는 N과 K가 주어진다.
// 다음 줄에 수열의 원소들이 순서대로 주어진다.

// [출력]
// 출력의 각 줄은 ‘#x’로 시작하고, 공백을 한 칸 두고 문제에서 정의된 최대 합을 출력한다.
// 단, x는 테스트 케이스의 번호이다.

// [입력 예]
// 3                              // 테스트 케이스의 수
// 6 2                           // N = 6, 테스트 케이스 #1
// 2 4 3 -4 6 1
// 4 1                           // N = 4, 테스트 케이스 #2
// 3 4 5 1
// 4 2                           // N = 4, 테스트 케이스 #3
// -2 -3 -4 -1

// [출력 예]
// #1 14
// #2 9
// #3 -10